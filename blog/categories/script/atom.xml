<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: script | Ta Minh Duc]]></title>
  <link href="http://DxTa.github.io/blog/categories/script/atom.xml" rel="self"/>
  <link href="http://DxTa.github.io/"/>
  <updated>2014-05-01T00:58:55+07:00</updated>
  <id>http://DxTa.github.io/</id>
  <author>
    <name><![CDATA[Dx Ta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Init Script for Sidekiq in Centos]]></title>
    <link href="http://DxTa.github.io/blog/2014/03/06/init-script-for-sidekiq-in-centos/"/>
    <updated>2014-03-06T13:56:07+07:00</updated>
    <id>http://DxTa.github.io/blog/2014/03/06/init-script-for-sidekiq-in-centos</id>
    <content type="html"><![CDATA[<p>Sidekiq (<a href="http://sidekiq.org">http://sidekiq.org</a>) is a simple, efficient background processing for Ruby.</p>

<p>Sidekiq is easy to use, easy to setup. However, to make sidekiq run at startup is not so easy.
There &rsquo;s also a nice script here (<a href="https://github.com/mperham/sidekiq/blob/master/examples/sidekiq">https://github.com/mperham/sidekiq/blob/master/examples/sidekiq</a>),
although I &rsquo;ve got few problems with it.</p>

<p>If we have another user for deploying, then command <code>bundle exec</code> only accessed with &lsquo;deploy&rsquo; user.
Root  had no access to <code>bundle exec</code>.</p>

<p>Solution: Modify provided Sidekiq init script, to make it run <code>bundle exec</code> as &lsquo;deploy&rsquo; user.</p>

<p>``` bash
AS_USER=&ldquo;your_user&rdquo;
START_CMD=&ldquo;$BUNDLE exec $SIDEKIQ -e $APP_ENV -P $PID_FILE&rdquo;
CMD=&ldquo;cd ${APP_DIR}; ${START_CMD} >> ${LOG_FILE} 2>&amp;1 &amp;&rdquo;</p>

<h1>$START_CMD >> $LOG_FILE 2>&amp;1 &amp; #replaced this</h1>

<p>su -c &ldquo;$CMD&rdquo; &ndash; $AS_USER # with this
```</p>

<p>To make it run at startup, use <code>chkconfig</code> to add this as new service. Moreover, you need to verify
header of your script, make sure it is fired after <code>redis-server</code>.</p>

<p><code>bash
chkconfig --add name_of_new_service
</code></p>

<h3>Init Script after modified</h3>

<p>{% include_code sidekiq lang:bash sidekiq %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Invalid Login Snapping: Prevent Invalid Login Attempts Script for OSX]]></title>
    <link href="http://DxTa.github.io/blog/2014/02/23/invalid-login-snapping-prevent-invalid-login-attempts-script-for-osx/"/>
    <updated>2014-02-23T19:54:05+07:00</updated>
    <id>http://DxTa.github.io/blog/2014/02/23/invalid-login-snapping-prevent-invalid-login-attempts-script-for-osx</id>
    <content type="html"><![CDATA[<p>This script will take a snapshot on failed login attempts, email it to your email account,
letting you know someone is currently trying to login to your macbook.</p>

<h2>Requirement</h2>

<pre><code>1. imagesnap
2. whereami
3. An email account (I'm currently using Gmail)
</code></pre>

<h2>Configure Email</h2>

<p>Append the following line to <strong>/etc/postfix/main.cf</strong></p>

<p><code>bash /etc/post/fix/main.cf
relayhost=smtp.gmail.com:587
smtp_sasl_auth_enable=yes
smtp_sasl_password_maps=hash:/etc/postfix/sasl_passwd
smtp_sasl_security_options=
smtp_use_tls=yes
smtp_tls_security_level=encrypt
tls_random_source=dev:/dev/urandom
</code>
Create <strong>/etc/postfix/sasl_passwd</strong> and populate following example below:</p>

<pre><code>smtp.gmail.com:587 account@gmail.com:password
</code></pre>

<p>Then run:
<code>bash
postmap /etc/postfix/sasl_passwd; chmod 600 /etc/postfix/sasl_passwd*
postfix stop
postfix start
</code></p>

<h2>Enable Logging Failed Attempt</h2>

<p>Append this line to <strong>/etc/asl.conf</strong></p>

<pre><code># Facility loginwindow gets saved in loginwindow.log
? [= Sender loginwindow] file /var/log/loginwindow.log mode=0640 format=bsd
</code></pre>

<p>Restart syslogd</p>

<p><code>bash
sudo launchctl unload /System/Library/LaunchDaemons/com.apple.syslogd.plist
sudo launchctl load /System/Library/LaunchDaemons/com.apple.syslogd.plist
</code></p>

<h2>Scripting</h2>

<p>Create script <strong>/usr/local/bin/invalid_login_snap</strong> :</p>

<p><strong>Remember to change email to yours</strong>.</p>

<p>``` bash</p>

<h1>!/bin/sh</h1>

<p>runcheck=<code>ps -ef|grep -v grep|grep 'tail -f /var/log/loginwindow.log' &gt; /dev/null;echo $?</code>
zero=0;</p>

<p>if [ $runcheck -ne $zero ]; then
  nohup tail -f /var/log/loginwindow.log| awk &lsquo;/The authtok is incorrect/ {system(&ldquo;/usr/local/bin/imagesnap /var/tmp/.snap.jpg > /dev/null; (curl ipecho.net/plain ; echo; /usr/local/bin/whereami; uuencode /var/tmp/.snap.jpg snap.jpg)\|mailx -s \"Macbook Invalid Login Attempt\&rdquo; ductm310@gmail.com; echo \&ldquo;Someone Is Trying To Log Into Your Macbook Check Gmail for Snapshot\&rdquo; \|rm -f /var/tmp/.snap.jpg")}&rsquo; &amp;
var/tmp/.snap.jpg
fi
```</p>

<p><strong>Make sure your script is executable</strong></p>

<h2>Autostart</h2>

<p>There are many ways to make this script autostart.</p>

<p>I use Automator to create application executing this script and add to StartupItems.</p>
]]></content>
  </entry>
  
</feed>
